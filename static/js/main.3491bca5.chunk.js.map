{"version":3,"sources":["context/MethodsContext.js","hooks/useMethods.js","components/Toolbar.js","components/DataModalContent.js","hooks/useMethodRegistration.js","hooks/useMultipleFetch.js","data.js","components/ContextMenu.js","pages/TablePage.js","App.js","reportWebVitals.js","hoc/MethodsProvider.js","index.js"],"names":["MethodsContext","createContext","useMethods","scope","useContext","methods","Error","useCallback","name","foundMethod","args","Toolbar","loading","toolbarData","getMethod","gutter","align","flex","Button","map","id","operationDescription","operationCaption","operationOrd","operationMethod","order","title","onClick","type","memo","TextArea","Input","DataModalContent","modalData","recordKey","columnsObj","modalDataKeys","useMemo","Object","keys","style","marginTop","layout","labelCol","span","dataKey","index","Item","label","initialValue","disabled","autoSize","minRows","useMethodRegistration","methodsMap","clearOnUnmount","setMethods","oldMethods","useRef","clearMethods","newMethods","useEffect","current","createInitState","initDataState","data","error","fetch","useMultipleFetch","fetchFunctions","initDataStates","useState","isLoading","setLoading","innerState","setInnerState","a","length","fetchIndexes","promises","reduce","push","Promise","allSettled","settledPromises","newState","forEach","settledPromise","fetchState","status","value","createRefetch","refetchAll","state","refetch","key","firstName","lastName","sex","address","age","gridData","columns","dataIndex","contextOperations","ord","caption","method","toolbar","operationName","dblClickOperation","fetchGrid","resolve","setTimeout","fetchData","ContextMenu","visible","x","y","menuData","callMethod","className","left","top","block","TablePage","fetchGridResult","fetchDataResult","obj","openModal","record","Modal","confirm","centered","closable","width","icon","content","exportData","console","log","contextMenuState","setContextMenuState","editObject","refreshPage","justify","xl","md","xs","dataSource","onRow","recordData","onDoubleClick","onContextMenu","event","preventDefault","document","addEventListener","onClickOutside","removeEventListener","clientX","clientY","Content","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MethodsProvider","initMethods","children","Provider","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3491bca5.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst MethodsContext = createContext({});\n\nexport default MethodsContext;\n","import { useCallback, useContext } from 'react';\nimport MethodsContext from '../context/MethodsContext';\n\nconst useMethods = (scope) => {\n  const [methods] = useContext(MethodsContext);\n\n  if (!scope) {\n    throw new Error('useMethods: scope is required');\n  }\n\n  const getMethod = useCallback(\n    (name) => {\n      const foundMethod = methods[scope][name];\n      if (foundMethod) {\n        return foundMethod;\n      }\n      throw new Error(\n        `useMethods: Method ${name} in scope ${scope} is not exists`\n      );\n    },\n    [scope, methods]\n  );\n\n  const callMethod = useCallback(\n    (name, ...args) => {\n      const foundMethod = methods[scope][name];\n      if (foundMethod) {\n        return foundMethod(...args);\n      }\n      throw new Error(\n        `useMethods: Method ${name} in scope ${scope} is not exists`\n      );\n    },\n    [scope, methods]\n  );\n\n  return [getMethod, callMethod];\n};\n\nexport default useMethods;\n","import { memo } from 'react';\nimport { Button, Card, Col, Row, Skeleton, Tooltip } from 'antd';\nimport useMethods from '../hooks/useMethods';\n\nconst Toolbar = ({ loading, toolbarData = [] }) => {\n  const [getMethod] = useMethods('table');\n\n  return (\n    <Card>\n      <Row gutter={[8, 0]} align={'middle'}>\n        {loading ? (\n          <>\n            <Col flex={'row'}>\n              <Skeleton.Button />\n            </Col>\n            <Col flex={'row'}>\n              <Skeleton.Button />\n            </Col>\n            <Col flex={'row'}>\n              <Skeleton.Button />\n            </Col>\n          </>\n        ) : (\n          toolbarData.map(\n            ({\n              id,\n              operationDescription,\n              operationCaption,\n              operationOrd,\n              operationMethod,\n            }) => (\n              <Col\n                key={`toolbar_button_${id}`}\n                flex={'row'}\n                order={operationOrd}\n              >\n                <Tooltip title={operationDescription}>\n                  <Button onClick={getMethod(operationMethod)} type=\"primary\">\n                    {operationCaption}\n                  </Button>\n                </Tooltip>\n              </Col>\n            )\n          )\n        )}\n      </Row>\n    </Card>\n  );\n};\n\nexport default memo(Toolbar);\n","import React, { memo, useMemo } from 'react';\nimport { Col, Form, Input, Row } from 'antd';\n\nconst { TextArea } = Input;\n\nconst DataModalContent = ({ modalData, recordKey, columnsObj }) => {\n  const modalDataKeys = useMemo(() => Object.keys(modalData), [modalData]);\n\n  return (\n    <Form\n      style={{ marginTop: '32px' }}\n      layout={'horizontal'}\n      labelCol={{ span: 10 }}\n    >\n      <Row gutter={[8, 8]}>\n        {modalDataKeys.map((dataKey, index) => (\n          <Col span={12} key={`modal_${recordKey}_${index}`}>\n            <Form.Item\n              key={`modal_${recordKey}_${index}`}\n              name={dataKey}\n              label={columnsObj[dataKey]}\n              initialValue={modalData[dataKey]}\n            >\n              <TextArea disabled autoSize={{ minRows: 1 }} />\n            </Form.Item>\n          </Col>\n        ))}\n      </Row>\n    </Form>\n  );\n};\n\nexport default memo(DataModalContent);\n","import MethodsContext from '../context/MethodsContext';\nimport { useCallback, useContext, useEffect, useRef } from 'react';\n\nconst useMethodRegistration = (\n  scope,\n  methodsMap = {},\n  clearOnUnmount = true\n) => {\n  const [methods, setMethods] = useContext(MethodsContext);\n  const oldMethods = useRef({});\n\n  if (!scope) {\n    throw new Error('useMethodRegistration: scope is required');\n  }\n\n  const clearMethods = useCallback(() => {\n    const newMethods = { ...methods };\n    delete newMethods[scope];\n    setMethods(newMethods);\n  }, [methods, scope]);\n\n  useEffect(() => {\n    if (methodsMap !== oldMethods.current) {\n      setMethods({ ...methods, [scope]: { ...methodsMap } });\n      oldMethods.current = methodsMap;\n      if (clearOnUnmount) {\n        return () => clearMethods();\n      }\n    }\n  }, [methodsMap]);\n\n  return clearMethods;\n};\n\nexport default useMethodRegistration;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nconst createInitState = (initDataState) => ({\n  data: initDataState || null,\n  error: null,\n  fetch: true,\n});\n\nconst useMultipleFetch = (fetchFunctions = [], initDataStates = []) => {\n  const [isLoading, setLoading] = useState(true);\n  const [innerState, setInnerState] = useState(\n    fetchFunctions.map((fetch, index) => createInitState(initDataStates[index]))\n  );\n\n  useEffect(async () => {\n    if (innerState.length && fetchFunctions.length) {\n      const fetchIndexes = [];\n      const promises = fetchFunctions.reduce((promises, fetch, index) => {\n        if (innerState[index].fetch) {\n          fetchIndexes.push(index);\n          return [...promises, fetch()];\n        }\n        return promises;\n      }, []);\n      if (promises.length) {\n        const settledPromises = await Promise.allSettled(promises);\n        const newState = [...innerState];\n        settledPromises.forEach((settledPromise, index) => {\n          const fetchState = newState[fetchIndexes[index]];\n          fetchState.fetch = false;\n          if (settledPromise.status === 'rejected') {\n            fetchState.data = initDataStates[fetchIndexes[index]] || null;\n            fetchState.error = settledPromise.error;\n          } else {\n            fetchState.data = settledPromise.value;\n            fetchState.error = null;\n          }\n        });\n        setInnerState(newState);\n      }\n      setLoading(false);\n    }\n  }, [innerState]);\n\n  const createRefetch = (index) => () => {\n    const newState = [...innerState];\n    newState[index].fetch = true;\n    setInnerState(newState);\n    setLoading(true);\n  };\n\n  const refetchAll = useCallback(() => {\n    const newState = innerState.map((state) => ({ ...state, fetch: true }));\n    setInnerState(newState);\n    setLoading(true);\n  }, [innerState]);\n\n  const data = useMemo(\n    () =>\n      innerState.map(({ data, error }, index) => ({\n        data,\n        error,\n        refetch: createRefetch(index),\n      })),\n    [innerState]\n  );\n\n  return [isLoading, refetchAll, ...data];\n};\n\nexport default useMultipleFetch;\n","const toolbar = [\n  // обновляет данные в таблице\n  {\n    operationOrd: 2,\n    operationName: 'refreshPage',\n    operationCaption: 'Обновить',\n    operationDescription: 'Обновление страницы',\n    operationMethod: 'refreshPage',\n    id: 164,\n  },\n  // выгружает данные таблицы в эксель (просто вывод данных таблицы через console.log)\n  {\n    operationOrd: 3,\n    operationName: 'exportData',\n    operationCaption: 'В Excel',\n    operationDescription: 'В Excel',\n    operationMethod: 'exportData',\n    id: 165,\n  },\n];\n\nconst contextOperations = [\n  //открывает текущую строку в форме\n  {\n    ord: 1,\n    name: 'open',\n    caption: 'Открыть',\n    method: 'editObject',\n  },\n  // выгружает данные таблицы в эксель (просто вывод данных таблицы через console.log)\n  {\n    ord: 2,\n    name: 'exportData',\n    caption: 'В Excel',\n    method: 'exportData',\n  },\n];\n\nconst columns = [\n  {\n    title: 'First name',\n    dataIndex: 'firstName',\n    key: 'firstName',\n  },\n  {\n    title: 'Last name',\n    dataIndex: 'lastName',\n    key: 'lastName',\n  },\n  {\n    title: 'Sex',\n    dataIndex: 'sex',\n    key: 'sex',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    firstName: 'John',\n    lastName: 'Brown',\n    sex: 'male',\n    address: 'New York No. 1 Lake Park',\n    age: 32,\n  },\n  {\n    key: '2',\n    firstName: 'Joan',\n    lastName: 'Green',\n    sex: 'female',\n    address: 'London No. 1 Lake Park',\n    age: 42,\n  },\n  {\n    key: '3',\n    firstName: 'Bob',\n    lastName: 'Yellow',\n    sex: 'male',\n    address: 'Sidney No. 1 Lake Park',\n    age: 36,\n  },\n];\n\nconst dblClickOperation = {\n  name: 'open',\n  method: 'editObject',\n};\n\nconst gridData = {\n  columns,\n  contextOperations,\n  toolbar,\n  dblClickOperation,\n};\n\n/**\n * Функция получения описания таблицы\n */\nexport function fetchGrid() {\n  const promise = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(gridData);\n    }, 1000);\n  });\n  return promise;\n}\n\n/**\n * Функция получения данных для таблицы\n */\nexport function fetchData() {\n  const promise = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(data);\n    }, 1000);\n  });\n  return promise;\n}\n","import React, { memo } from 'react';\nimport { Button, Col, Row } from 'antd';\nimport useMethods from '../hooks/useMethods';\n\nconst ContextMenu = ({ visible, x, y, menuData, args }) => {\n  const [, callMethod] = useMethods('table');\n\n  return (\n    visible && (\n      <div className={'popup'} style={{ left: `${x}px`, top: `${y}px` }}>\n        <Row>\n          {menuData.map(({ ord, name, caption, method }) => (\n            <Col span={24} order={ord} key={`context_menu_${name}`}>\n              <Button\n                block\n                onClick={() => callMethod(method, ...args)}\n                type={'text'}\n              >\n                {caption}\n              </Button>\n            </Col>\n          ))}\n        </Row>\n      </div>\n    )\n  );\n};\n\nexport default memo(ContextMenu);\n","import React, { memo, useCallback, useMemo, useState } from 'react';\nimport Toolbar from '../components/Toolbar';\nimport { Col, Modal, Row, Table } from 'antd';\nimport DataModalContent from '../components/DataModalContent';\nimport useMethodRegistration from '../hooks/useMethodRegistration';\nimport useMethods from '../hooks/useMethods';\nimport useMultipleFetch from '../hooks/useMultipleFetch';\nimport { fetchData, fetchGrid } from '../data';\nimport ContextMenu from '../components/ContextMenu';\n\nconst TablePage = () => {\n  const [isLoading, refetchAll, fetchGridResult, fetchDataResult] =\n    useMultipleFetch([fetchGrid, fetchData], [{}, []]);\n\n  const { columns, toolbar, contextOperations, dblClickOperation } =\n    fetchGridResult.data;\n\n  const columnsObj = useMemo(\n    () =>\n      columns &&\n      columns.reduce(\n        (obj, { dataIndex, title }) => ({ ...obj, [dataIndex]: title }),\n        {}\n      ),\n    [columns]\n  );\n\n  const openModal = useCallback(\n    (record, recordKey) => {\n      Modal.confirm({\n        title: 'Record Info',\n        centered: true,\n        closable: true,\n        width: 500,\n        icon: null,\n        content: (\n          <DataModalContent\n            modalData={record}\n            recordKey={recordKey}\n            columnsObj={columnsObj}\n          />\n        ),\n      });\n    },\n    [columnsObj]\n  );\n\n  const exportData = useCallback(\n    () => console.log(fetchDataResult.data),\n    [fetchDataResult]\n  );\n\n  const [contextMenuState, setContextMenuState] = useState({\n    visible: false,\n    args: [],\n    x: 0,\n    y: 0,\n  });\n\n  const methodsMap = useMemo(\n    () => ({ editObject: openModal, refreshPage: refetchAll, exportData }),\n    [openModal]\n  );\n\n  useMethodRegistration('table', methodsMap);\n  const [, callMethod] = useMethods('table');\n\n  return (\n    <Row style={{ marginTop: '16px' }} justify={'center'}>\n      <ContextMenu menuData={contextOperations} {...contextMenuState} />\n      <Col xl={12} md={14} xs={23}>\n        <Row gutter={[0, 16]}>\n          <Col span={24}>\n            <Toolbar loading={isLoading} toolbarData={toolbar} />\n          </Col>\n          <Col span={24}>\n            <Table\n              loading={isLoading}\n              dataSource={fetchDataResult.data}\n              columns={columns}\n              onRow={({ key, ...recordData }) => {\n                return {\n                  onDoubleClick: () =>\n                    dblClickOperation &&\n                    callMethod(dblClickOperation.method, recordData, key),\n                  onContextMenu: (event) => {\n                    event.preventDefault();\n                    document.addEventListener(\n                      `click`,\n                      function onClickOutside() {\n                        setContextMenuState({\n                          ...contextMenuState,\n                          visible: false,\n                        });\n                        document.removeEventListener(`click`, onClickOutside);\n                      }\n                    );\n                    setContextMenuState({\n                      visible: true,\n                      args: [recordData, key],\n                      x: event.clientX,\n                      y: event.clientY,\n                    });\n                  },\n                };\n              }}\n            />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default memo(TablePage);\n","import { Layout } from 'antd';\nimport TablePage from './pages/TablePage';\nimport './App.css';\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Content className={'main-content'}>\n        <TablePage />\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { memo, useState } from 'react';\nimport MethodsContext from '../context/MethodsContext';\n\nconst MethodsProvider = ({ initMethods = {}, children }) => {\n  const [methods, setMethods] = useState(initMethods);\n\n  return (\n    <MethodsContext.Provider value={[methods, setMethods]}>\n      {children}\n    </MethodsContext.Provider>\n  );\n};\n\nexport default memo(MethodsProvider);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport MethodsProvider from './hoc/MethodsProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MethodsProvider>\n      <App />\n    </MethodsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}